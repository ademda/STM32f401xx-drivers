
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c10  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000da4  08000da4  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000da4  08000da4  00002028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000da4  08000da4  00001da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000dac  08000dac  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dac  08000dac  00001dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000db0  08000db0  00001db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08000db4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000028  08000ddc  00002028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08000ddc  0000208c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001732  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e1  00000000  00000000  0000378a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00003d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000115  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010c2  00000000  00000000  00004005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022e6  00000000  00000000  000050c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a3a5  00000000  00000000  000073ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00011752  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000508  00000000  00000000  00011798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00011ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000d8c 	.word	0x08000d8c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	08000d8c 	.word	0x08000d8c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <USART2_GPIOInits>:
#include <stdlib.h> 
USART_Handle_t USARTHandle; 
volatile int a; 
uint8_t data[] = "Hello World";
uint8_t rxBuffer[30];
void USART2_GPIOInits(void){ 
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
    GPIO_Handle_t USART2Pins; 
    USART2Pins.pGPIOx = GPIOA;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000224 <USART2_GPIOInits+0x40>)
 80001ec:	607b      	str	r3, [r7, #4]
    USART2Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN; 
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
    USART2Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 8;  // AF8 for USART6
 80001f2:	2308      	movs	r3, #8
 80001f4:	737b      	strb	r3, [r7, #13]
    USART2Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; 
 80001f6:	2300      	movs	r3, #0
 80001f8:	733b      	strb	r3, [r7, #12]
    USART2Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; 
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
    USART2Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST; 
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]
    //TX 
    USART2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;  // PA11
 8000202:	230b      	movs	r3, #11
 8000204:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&USART2Pins); 
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f91b 	bl	8000444 <GPIO_Init>
    //RX 
    USART2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;  // PA12
 800020e:	230c      	movs	r3, #12
 8000210:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&USART2Pins); 
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f915 	bl	8000444 <GPIO_Init>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40020000 	.word	0x40020000

08000228 <USART2_Init>:
void USART2_Init(){ 
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
    USARTHandle.pUSARTx = USART6; 
 800022c:	4b0d      	ldr	r3, [pc, #52]	@ (8000264 <USART2_Init+0x3c>)
 800022e:	4a0e      	ldr	r2, [pc, #56]	@ (8000268 <USART2_Init+0x40>)
 8000230:	601a      	str	r2, [r3, #0]
    USARTHandle.USART_Config.USART_Baud = USART_STD_BAUD_9600; 
 8000232:	4b0c      	ldr	r3, [pc, #48]	@ (8000264 <USART2_Init+0x3c>)
 8000234:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000238:	609a      	str	r2, [r3, #8]
    USARTHandle.USART_Config.USART_Mode = USART_MODE_TXRX; 
 800023a:	4b0a      	ldr	r3, [pc, #40]	@ (8000264 <USART2_Init+0x3c>)
 800023c:	2202      	movs	r2, #2
 800023e:	711a      	strb	r2, [r3, #4]
    USARTHandle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE; 
 8000240:	4b08      	ldr	r3, [pc, #32]	@ (8000264 <USART2_Init+0x3c>)
 8000242:	2200      	movs	r2, #0
 8000244:	739a      	strb	r2, [r3, #14]
    USARTHandle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS; 
 8000246:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <USART2_Init+0x3c>)
 8000248:	2200      	movs	r2, #0
 800024a:	735a      	strb	r2, [r3, #13]
    USARTHandle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1 ; 
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <USART2_Init+0x3c>)
 800024e:	2200      	movs	r2, #0
 8000250:	731a      	strb	r2, [r3, #12]
    USARTHandle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE; 
 8000252:	4b04      	ldr	r3, [pc, #16]	@ (8000264 <USART2_Init+0x3c>)
 8000254:	2200      	movs	r2, #0
 8000256:	73da      	strb	r2, [r3, #15]
    USART_Init(&USARTHandle); 
 8000258:	4802      	ldr	r0, [pc, #8]	@ (8000264 <USART2_Init+0x3c>)
 800025a:	f000 fc03 	bl	8000a64 <USART_Init>
} 
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000044 	.word	0x20000044
 8000268:	40011400 	.word	0x40011400

0800026c <main>:
int main(void){ 
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    USART2_GPIOInits(); 
 8000270:	f7ff ffb8 	bl	80001e4 <USART2_GPIOInits>
    USART2_Init(); 
 8000274:	f7ff ffd8 	bl	8000228 <USART2_Init>
    USART_PeripheralControl(USARTHandle.pUSARTx, ENABLE); 
 8000278:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <main+0x38>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2101      	movs	r1, #1
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fd2c 	bl	8000cdc <USART_PeripheralControl>
    USART_SendData(&USARTHandle, data, strlen((char *)data)); 
 8000284:	4808      	ldr	r0, [pc, #32]	@ (80002a8 <main+0x3c>)
 8000286:	f7ff ffa5 	bl	80001d4 <strlen>
 800028a:	4603      	mov	r3, r0
 800028c:	461a      	mov	r2, r3
 800028e:	4906      	ldr	r1, [pc, #24]	@ (80002a8 <main+0x3c>)
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <main+0x38>)
 8000292:	f000 fc75 	bl	8000b80 <USART_SendData>
    while(1){
    	USART_ReceiveData(&USARTHandle, rxBuffer, 4);
 8000296:	2204      	movs	r2, #4
 8000298:	4904      	ldr	r1, [pc, #16]	@ (80002ac <main+0x40>)
 800029a:	4802      	ldr	r0, [pc, #8]	@ (80002a4 <main+0x38>)
 800029c:	f000 fcc6 	bl	8000c2c <USART_ReceiveData>
    	while(1);
 80002a0:	bf00      	nop
 80002a2:	e7fd      	b.n	80002a0 <main+0x34>
 80002a4:	20000044 	.word	0x20000044
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000068 	.word	0x20000068

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	@ (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	@ (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 fd31 	bl	8000d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ffc3 	bl	800026c <main>

080002e6 <LoopForever>:

LoopForever:
  b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80002f4:	08000db4 	.word	0x08000db4
  ldr r2, =_sbss
 80002f8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80002fc:	2000008c 	.word	0x2000008c

08000300 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <GPIO_PeriClockControl>:
 *
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d141      	bne.n	800039a <GPIO_PeriClockControl+0x96>
		if (pGPIOx == GPIOA) {
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a43      	ldr	r2, [pc, #268]	@ (8000428 <GPIO_PeriClockControl+0x124>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800031e:	4b43      	ldr	r3, [pc, #268]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000322:	4a42      	ldr	r2, [pc, #264]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOH) {
			GPIOH_PCLK_DI();
		}
	}
}
 800032a:	e077      	b.n	800041c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a40      	ldr	r2, [pc, #256]	@ (8000430 <GPIO_PeriClockControl+0x12c>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000334:	4b3d      	ldr	r3, [pc, #244]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000338:	4a3c      	ldr	r2, [pc, #240]	@ (800042c <GPIO_PeriClockControl+0x128>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000340:	e06c      	b.n	800041c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a3b      	ldr	r2, [pc, #236]	@ (8000434 <GPIO_PeriClockControl+0x130>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800034a:	4b38      	ldr	r3, [pc, #224]	@ (800042c <GPIO_PeriClockControl+0x128>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034e:	4a37      	ldr	r2, [pc, #220]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000356:	e061      	b.n	800041c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a37      	ldr	r2, [pc, #220]	@ (8000438 <GPIO_PeriClockControl+0x134>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000360:	4b32      	ldr	r3, [pc, #200]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a31      	ldr	r2, [pc, #196]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036c:	e056      	b.n	800041c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a32      	ldr	r2, [pc, #200]	@ (800043c <GPIO_PeriClockControl+0x138>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000376:	4b2d      	ldr	r3, [pc, #180]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a2c      	ldr	r2, [pc, #176]	@ (800042c <GPIO_PeriClockControl+0x128>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000382:	e04b      	b.n	800041c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOH) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a2e      	ldr	r2, [pc, #184]	@ (8000440 <GPIO_PeriClockControl+0x13c>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d147      	bne.n	800041c <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 800038c:	4b27      	ldr	r3, [pc, #156]	@ (800042c <GPIO_PeriClockControl+0x128>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000390:	4a26      	ldr	r2, [pc, #152]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000396:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000398:	e040      	b.n	800041c <GPIO_PeriClockControl+0x118>
		if (pGPIOx == GPIOA) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a22      	ldr	r2, [pc, #136]	@ (8000428 <GPIO_PeriClockControl+0x124>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 80003a2:	4b22      	ldr	r3, [pc, #136]	@ (800042c <GPIO_PeriClockControl+0x128>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	4a21      	ldr	r2, [pc, #132]	@ (800042c <GPIO_PeriClockControl+0x128>)
 80003a8:	f023 0301 	bic.w	r3, r3, #1
 80003ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ae:	e035      	b.n	800041c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOB) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000430 <GPIO_PeriClockControl+0x12c>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 80003b8:	4b1c      	ldr	r3, [pc, #112]	@ (800042c <GPIO_PeriClockControl+0x128>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003bc:	4a1b      	ldr	r2, [pc, #108]	@ (800042c <GPIO_PeriClockControl+0x128>)
 80003be:	f023 0302 	bic.w	r3, r3, #2
 80003c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c4:	e02a      	b.n	800041c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOC) {
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000434 <GPIO_PeriClockControl+0x130>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80003ce:	4b17      	ldr	r3, [pc, #92]	@ (800042c <GPIO_PeriClockControl+0x128>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d2:	4a16      	ldr	r2, [pc, #88]	@ (800042c <GPIO_PeriClockControl+0x128>)
 80003d4:	f023 0304 	bic.w	r3, r3, #4
 80003d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003da:	e01f      	b.n	800041c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOD) {
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a16      	ldr	r2, [pc, #88]	@ (8000438 <GPIO_PeriClockControl+0x134>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80003e4:	4b11      	ldr	r3, [pc, #68]	@ (800042c <GPIO_PeriClockControl+0x128>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e8:	4a10      	ldr	r2, [pc, #64]	@ (800042c <GPIO_PeriClockControl+0x128>)
 80003ea:	f023 0308 	bic.w	r3, r3, #8
 80003ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f0:	e014      	b.n	800041c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOE) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a11      	ldr	r2, [pc, #68]	@ (800043c <GPIO_PeriClockControl+0x138>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <GPIO_PeriClockControl+0x128>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fe:	4a0b      	ldr	r2, [pc, #44]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000400:	f023 0310 	bic.w	r3, r3, #16
 8000404:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000406:	e009      	b.n	800041c <GPIO_PeriClockControl+0x118>
		} else if (pGPIOx == GPIOH) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a0d      	ldr	r2, [pc, #52]	@ (8000440 <GPIO_PeriClockControl+0x13c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d105      	bne.n	800041c <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000414:	4a05      	ldr	r2, [pc, #20]	@ (800042c <GPIO_PeriClockControl+0x128>)
 8000416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800041a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40020000 	.word	0x40020000
 800042c:	40023800 	.word	0x40023800
 8000430:	40020400 	.word	0x40020400
 8000434:	40020800 	.word	0x40020800
 8000438:	40020c00 	.word	0x40020c00
 800043c:	40021000 	.word	0x40021000
 8000440:	40021c00 	.word	0x40021c00

08000444 <GPIO_Init>:
 * @return		- none
 *
 * @Note		- none
 */

void GPIO_Init(GPIO_Handle_t *pGPIO_Handle) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]

	// configure the mode
	GPIO_PeriClockControl(pGPIO_Handle->pGPIOx, ENABLE);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2101      	movs	r1, #1
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff54 	bl	8000304 <GPIO_PeriClockControl>
	if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	2b03      	cmp	r3, #3
 8000462:	d820      	bhi.n	80004a6 <GPIO_Init+0x62>
		// non interrupt mode
		temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode<< (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	795b      	ldrb	r3, [r3, #5]
 8000468:	461a      	mov	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	791b      	ldrb	r3, [r3, #4]
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	fa02 f303 	lsl.w	r3, r2, r3
 8000474:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	2103      	movs	r1, #3
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	43db      	mvns	r3, r3
 800048a:	4619      	mov	r1, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	400a      	ands	r2, r1
 8000492:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOx->MODER |= temp;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	6819      	ldr	r1, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	697a      	ldr	r2, [r7, #20]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	e0a5      	b.n	80005f2 <GPIO_Init+0x1ae>

	} else {
		// Rising / falling / Rising and Falling configuration
		if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	795b      	ldrb	r3, [r3, #5]
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d117      	bne.n	80004de <GPIO_Init+0x9a>
			EXTI->FTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80004ae:	4b9f      	ldr	r3, [pc, #636]	@ (800072c <GPIO_Init+0x2e8>)
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	7912      	ldrb	r2, [r2, #4]
 80004b6:	4611      	mov	r1, r2
 80004b8:	2201      	movs	r2, #1
 80004ba:	408a      	lsls	r2, r1
 80004bc:	4611      	mov	r1, r2
 80004be:	4a9b      	ldr	r2, [pc, #620]	@ (800072c <GPIO_Init+0x2e8>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80004c4:	4b99      	ldr	r3, [pc, #612]	@ (800072c <GPIO_Init+0x2e8>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	7912      	ldrb	r2, [r2, #4]
 80004cc:	4611      	mov	r1, r2
 80004ce:	2201      	movs	r2, #1
 80004d0:	408a      	lsls	r2, r1
 80004d2:	43d2      	mvns	r2, r2
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a95      	ldr	r2, [pc, #596]	@ (800072c <GPIO_Init+0x2e8>)
 80004d8:	400b      	ands	r3, r1
 80004da:	6093      	str	r3, [r2, #8]
 80004dc:	e035      	b.n	800054a <GPIO_Init+0x106>
		}
		else if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	795b      	ldrb	r3, [r3, #5]
 80004e2:	2b05      	cmp	r3, #5
 80004e4:	d117      	bne.n	8000516 <GPIO_Init+0xd2>
			EXTI->FTSR &= ~(1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80004e6:	4b91      	ldr	r3, [pc, #580]	@ (800072c <GPIO_Init+0x2e8>)
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	7912      	ldrb	r2, [r2, #4]
 80004ee:	4611      	mov	r1, r2
 80004f0:	2201      	movs	r2, #1
 80004f2:	408a      	lsls	r2, r1
 80004f4:	43d2      	mvns	r2, r2
 80004f6:	4611      	mov	r1, r2
 80004f8:	4a8c      	ldr	r2, [pc, #560]	@ (800072c <GPIO_Init+0x2e8>)
 80004fa:	400b      	ands	r3, r1
 80004fc:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80004fe:	4b8b      	ldr	r3, [pc, #556]	@ (800072c <GPIO_Init+0x2e8>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	7912      	ldrb	r2, [r2, #4]
 8000506:	4611      	mov	r1, r2
 8000508:	2201      	movs	r2, #1
 800050a:	408a      	lsls	r2, r1
 800050c:	4611      	mov	r1, r2
 800050e:	4a87      	ldr	r2, [pc, #540]	@ (800072c <GPIO_Init+0x2e8>)
 8000510:	430b      	orrs	r3, r1
 8000512:	6093      	str	r3, [r2, #8]
 8000514:	e019      	b.n	800054a <GPIO_Init+0x106>
		}
		else if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	2b06      	cmp	r3, #6
 800051c:	d115      	bne.n	800054a <GPIO_Init+0x106>
			EXTI->FTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800051e:	4b83      	ldr	r3, [pc, #524]	@ (800072c <GPIO_Init+0x2e8>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	7912      	ldrb	r2, [r2, #4]
 8000526:	4611      	mov	r1, r2
 8000528:	2201      	movs	r2, #1
 800052a:	408a      	lsls	r2, r1
 800052c:	4611      	mov	r1, r2
 800052e:	4a7f      	ldr	r2, [pc, #508]	@ (800072c <GPIO_Init+0x2e8>)
 8000530:	430b      	orrs	r3, r1
 8000532:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000534:	4b7d      	ldr	r3, [pc, #500]	@ (800072c <GPIO_Init+0x2e8>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7912      	ldrb	r2, [r2, #4]
 800053c:	4611      	mov	r1, r2
 800053e:	2201      	movs	r2, #1
 8000540:	408a      	lsls	r2, r1
 8000542:	4611      	mov	r1, r2
 8000544:	4a79      	ldr	r2, [pc, #484]	@ (800072c <GPIO_Init+0x2e8>)
 8000546:	430b      	orrs	r3, r1
 8000548:	6093      	str	r3, [r2, #8]
		}
		//EXTICR configuration
		uint8_t temp1 = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	74bb      	strb	r3, [r7, #18]
		temp1 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	089b      	lsrs	r3, r3, #2
 8000558:	74fb      	strb	r3, [r7, #19]
		temp2 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	f003 0303 	and.w	r3, r3, #3
 8000562:	74bb      	strb	r3, [r7, #18]
		//SYSCFG->EXTICR[temp1] |= 1 << temp2;
		SYSCFG_PCLK_EN();
 8000564:	4b72      	ldr	r3, [pc, #456]	@ (8000730 <GPIO_Init+0x2ec>)
 8000566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000568:	4a71      	ldr	r2, [pc, #452]	@ (8000730 <GPIO_Init+0x2ec>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056e:	6453      	str	r3, [r2, #68]	@ 0x44
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIO_Handle->pGPIOx);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a6f      	ldr	r2, [pc, #444]	@ (8000734 <GPIO_Init+0x2f0>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d024      	beq.n	80005c4 <GPIO_Init+0x180>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a6e      	ldr	r2, [pc, #440]	@ (8000738 <GPIO_Init+0x2f4>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d01d      	beq.n	80005c0 <GPIO_Init+0x17c>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a6c      	ldr	r2, [pc, #432]	@ (800073c <GPIO_Init+0x2f8>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d016      	beq.n	80005bc <GPIO_Init+0x178>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a6b      	ldr	r2, [pc, #428]	@ (8000740 <GPIO_Init+0x2fc>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d00f      	beq.n	80005b8 <GPIO_Init+0x174>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a69      	ldr	r2, [pc, #420]	@ (8000744 <GPIO_Init+0x300>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d008      	beq.n	80005b4 <GPIO_Init+0x170>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a68      	ldr	r2, [pc, #416]	@ (8000748 <GPIO_Init+0x304>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d101      	bne.n	80005b0 <GPIO_Init+0x16c>
 80005ac:	2307      	movs	r3, #7
 80005ae:	e00a      	b.n	80005c6 <GPIO_Init+0x182>
 80005b0:	2300      	movs	r3, #0
 80005b2:	e008      	b.n	80005c6 <GPIO_Init+0x182>
 80005b4:	2304      	movs	r3, #4
 80005b6:	e006      	b.n	80005c6 <GPIO_Init+0x182>
 80005b8:	2303      	movs	r3, #3
 80005ba:	e004      	b.n	80005c6 <GPIO_Init+0x182>
 80005bc:	2302      	movs	r3, #2
 80005be:	e002      	b.n	80005c6 <GPIO_Init+0x182>
 80005c0:	2301      	movs	r3, #1
 80005c2:	e000      	b.n	80005c6 <GPIO_Init+0x182>
 80005c4:	2300      	movs	r3, #0
 80005c6:	747b      	strb	r3, [r7, #17]
		SYSCFG->EXTICR[temp1] = port_code << ( temp2 * 4);
 80005c8:	7c7a      	ldrb	r2, [r7, #17]
 80005ca:	7cbb      	ldrb	r3, [r7, #18]
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	fa02 f103 	lsl.w	r1, r2, r3
 80005d2:	4a5e      	ldr	r2, [pc, #376]	@ (800074c <GPIO_Init+0x308>)
 80005d4:	7cfb      	ldrb	r3, [r7, #19]
 80005d6:	3302      	adds	r3, #2
 80005d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//IMR Enabling
		EXTI->IMR |= 1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber;
 80005dc:	4b53      	ldr	r3, [pc, #332]	@ (800072c <GPIO_Init+0x2e8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7912      	ldrb	r2, [r2, #4]
 80005e4:	4611      	mov	r1, r2
 80005e6:	2201      	movs	r2, #1
 80005e8:	408a      	lsls	r2, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a4f      	ldr	r2, [pc, #316]	@ (800072c <GPIO_Init+0x2e8>)
 80005ee:	430b      	orrs	r3, r1
 80005f0:	6013      	str	r3, [r2, #0]
		//interrupt mode
	}
	//2. configure the speed
	temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber) );
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	799b      	ldrb	r3, [r3, #6]
 80005f6:	461a      	mov	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	689a      	ldr	r2, [r3, #8]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	2103      	movs	r1, #3
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	43db      	mvns	r3, r3
 8000618:	4619      	mov	r1, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	400a      	ands	r2, r1
 8000620:	609a      	str	r2, [r3, #8]
	pGPIO_Handle->pGPIOx->OSPEEDR |= temp;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	6899      	ldr	r1, [r3, #8]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	430a      	orrs	r2, r1
 8000630:	609a      	str	r2, [r3, #8]

	//3. configure the pull up pull down settings
	temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber) );
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	79db      	ldrb	r3, [r3, #7]
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	68da      	ldr	r2, [r3, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	2103      	movs	r1, #3
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	43db      	mvns	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	400a      	ands	r2, r1
 8000660:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOx->PUPDR |= temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	68d9      	ldr	r1, [r3, #12]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	430a      	orrs	r2, r1
 8000670:	60da      	str	r2, [r3, #12]


	//4. configure the out put type
	temp = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber );
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	7a1b      	ldrb	r3, [r3, #8]
 8000676:	461a      	mov	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OTYPER &= ~( 0x1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	685a      	ldr	r2, [r3, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	4619      	mov	r1, r3
 800068e:	2301      	movs	r3, #1
 8000690:	408b      	lsls	r3, r1
 8000692:	43db      	mvns	r3, r3
 8000694:	4619      	mov	r1, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	400a      	ands	r2, r1
 800069c:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER |= temp;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	6859      	ldr	r1, [r3, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	430a      	orrs	r2, r1
 80006ac:	605a      	str	r2, [r3, #4]
	// configure the Alternate function mode
	if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	795b      	ldrb	r3, [r3, #5]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d135      	bne.n	8000722 <GPIO_Init+0x2de>
		uint8_t temp1 = 0 ;
 80006b6:	2300      	movs	r3, #0
 80006b8:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
		temp1 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	08db      	lsrs	r3, r3, #3
 80006c4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	73fb      	strb	r3, [r7, #15]
		pGPIO_Handle->pGPIOx->AF[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	7c3a      	ldrb	r2, [r7, #16]
 80006d6:	3208      	adds	r2, #8
 80006d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	220f      	movs	r2, #15
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43db      	mvns	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	7c3a      	ldrb	r2, [r7, #16]
 80006f0:	4001      	ands	r1, r0
 80006f2:	3208      	adds	r2, #8
 80006f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIO_Handle->pGPIOx->AF[temp1] |= pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	7c3a      	ldrb	r2, [r7, #16]
 80006fe:	3208      	adds	r2, #8
 8000700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7a5b      	ldrb	r3, [r3, #9]
 8000708:	461a      	mov	r2, r3
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	7c3a      	ldrb	r2, [r7, #16]
 800071a:	4301      	orrs	r1, r0
 800071c:	3208      	adds	r2, #8
 800071e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40013c00 	.word	0x40013c00
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000
 8000738:	40020400 	.word	0x40020400
 800073c:	40020800 	.word	0x40020800
 8000740:	40020c00 	.word	0x40020c00
 8000744:	40021000 	.word	0x40021000
 8000748:	40021c00 	.word	0x40021c00
 800074c:	40013800 	.word	0x40013800

08000750 <RCC_GetPllOutputClkValue>:
 *
 * @return		- uint32_t : PLL output clock frequency in Hz
 *
 * @Note		- currently a stub returning 0; implement PLL calculation if PLL used
 */
uint32_t RCC_GetPllOutputClkValue(){
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	return 0;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <RCC_GetPClk1Value>:
 *
 * @return		- uint32_t : PCLK1 frequency in Hz
 *
 * @Note		- calculates PCLK1 based on system clock and prescalers in RCC->CFGR
 */
uint32_t RCC_GetPClk1Value(){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
	uint8_t pclk_type = (RCC->CFGR >> 2) & (0x3);
 8000766:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <RCC_GetPClk1Value+0xa0>)
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	089b      	lsrs	r3, r3, #2
 800076c:	b2db      	uxtb	r3, r3
 800076e:	f003 0303 	and.w	r3, r3, #3
 8000772:	727b      	strb	r3, [r7, #9]
	uint32_t sys_clock, pclk1;;
	uint8_t temp,ahb_prescaler, apb1_prescaler;
	if (pclk_type == 0){
 8000774:	7a7b      	ldrb	r3, [r7, #9]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d102      	bne.n	8000780 <RCC_GetPClk1Value+0x20>
		sys_clock = 16000000;
 800077a:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <RCC_GetPClk1Value+0xa4>)
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e00b      	b.n	8000798 <RCC_GetPClk1Value+0x38>
	}else if (pclk_type == 1){
 8000780:	7a7b      	ldrb	r3, [r7, #9]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d102      	bne.n	800078c <RCC_GetPClk1Value+0x2c>
		sys_clock = 8000000;
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <RCC_GetPClk1Value+0xa8>)
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	e005      	b.n	8000798 <RCC_GetPClk1Value+0x38>
	}else if (pclk_type == 2){
 800078c:	7a7b      	ldrb	r3, [r7, #9]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d102      	bne.n	8000798 <RCC_GetPClk1Value+0x38>
		sys_clock = RCC_GetPllOutputClkValue();
 8000792:	f7ff ffdd 	bl	8000750 <RCC_GetPllOutputClkValue>
 8000796:	60f8      	str	r0, [r7, #12]
	}
	temp = (RCC->CFGR >> 4) & (0xF);
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <RCC_GetPClk1Value+0xa0>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	091b      	lsrs	r3, r3, #4
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 030f 	and.w	r3, r3, #15
 80007a4:	723b      	strb	r3, [r7, #8]
	if (temp < 8){
 80007a6:	7a3b      	ldrb	r3, [r7, #8]
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	d802      	bhi.n	80007b2 <RCC_GetPClk1Value+0x52>
		ahb_prescaler = 1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	72fb      	strb	r3, [r7, #11]
 80007b0:	e005      	b.n	80007be <RCC_GetPClk1Value+0x5e>
	}else {
		ahb_prescaler = AHB_Prescaler[temp-8];
 80007b2:	7a3b      	ldrb	r3, [r7, #8]
 80007b4:	3b08      	subs	r3, #8
 80007b6:	4a15      	ldr	r2, [pc, #84]	@ (800080c <RCC_GetPClk1Value+0xac>)
 80007b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007bc:	72fb      	strb	r3, [r7, #11]
	}
	temp = (RCC->CFGR >> 10) & (0x7);
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <RCC_GetPClk1Value+0xa0>)
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	0a9b      	lsrs	r3, r3, #10
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	723b      	strb	r3, [r7, #8]
	if (temp < 4){
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d802      	bhi.n	80007d8 <RCC_GetPClk1Value+0x78>
		apb1_prescaler = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	72bb      	strb	r3, [r7, #10]
 80007d6:	e005      	b.n	80007e4 <RCC_GetPClk1Value+0x84>
	}else {
		apb1_prescaler = APB_Prescaler[temp - 4];
 80007d8:	7a3b      	ldrb	r3, [r7, #8]
 80007da:	3b04      	subs	r3, #4
 80007dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000810 <RCC_GetPClk1Value+0xb0>)
 80007de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007e2:	72bb      	strb	r3, [r7, #10]
	}
	pclk1 = (sys_clock / ahb_prescaler) / apb1_prescaler;
 80007e4:	7afb      	ldrb	r3, [r7, #11]
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80007ec:	7abb      	ldrb	r3, [r7, #10]
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	607b      	str	r3, [r7, #4]
	return pclk1;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	00f42400 	.word	0x00f42400
 8000808:	007a1200 	.word	0x007a1200
 800080c:	2000000c 	.word	0x2000000c
 8000810:	20000020 	.word	0x20000020

08000814 <RCC_GetPClk2Value>:
 *
 * @return		- uint32_t : PCLK2 frequency in Hz
 *
 * @Note		- calculates PCLK2 based on system clock and prescalers in RCC->CFGR
 */
uint32_t RCC_GetPClk2Value(){
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
	uint8_t pclk_type = (RCC->CFGR >> 2) & (0x3);
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <RCC_GetPClk2Value+0xa0>)
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	089b      	lsrs	r3, r3, #2
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f003 0303 	and.w	r3, r3, #3
 8000826:	727b      	strb	r3, [r7, #9]
	uint32_t sys_clock, pclk2;;
	uint8_t temp,ahb_prescaler, apb2_prescaler;
	if (pclk_type == 0){
 8000828:	7a7b      	ldrb	r3, [r7, #9]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d102      	bne.n	8000834 <RCC_GetPClk2Value+0x20>
		sys_clock = 16000000;
 800082e:	4b22      	ldr	r3, [pc, #136]	@ (80008b8 <RCC_GetPClk2Value+0xa4>)
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e00b      	b.n	800084c <RCC_GetPClk2Value+0x38>
	}else if (pclk_type == 1){
 8000834:	7a7b      	ldrb	r3, [r7, #9]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d102      	bne.n	8000840 <RCC_GetPClk2Value+0x2c>
		sys_clock = 8000000;
 800083a:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <RCC_GetPClk2Value+0xa8>)
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	e005      	b.n	800084c <RCC_GetPClk2Value+0x38>
	}else if (pclk_type == 2){
 8000840:	7a7b      	ldrb	r3, [r7, #9]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d102      	bne.n	800084c <RCC_GetPClk2Value+0x38>
		sys_clock = RCC_GetPllOutputClkValue();
 8000846:	f7ff ff83 	bl	8000750 <RCC_GetPllOutputClkValue>
 800084a:	60f8      	str	r0, [r7, #12]
	}
	temp = (RCC->CFGR >> 4) & (0xF);
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <RCC_GetPClk2Value+0xa0>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	091b      	lsrs	r3, r3, #4
 8000852:	b2db      	uxtb	r3, r3
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	723b      	strb	r3, [r7, #8]
	if (temp < 8){
 800085a:	7a3b      	ldrb	r3, [r7, #8]
 800085c:	2b07      	cmp	r3, #7
 800085e:	d802      	bhi.n	8000866 <RCC_GetPClk2Value+0x52>
		ahb_prescaler = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	72fb      	strb	r3, [r7, #11]
 8000864:	e005      	b.n	8000872 <RCC_GetPClk2Value+0x5e>
	}else {
		ahb_prescaler = AHB_Prescaler[temp-8];
 8000866:	7a3b      	ldrb	r3, [r7, #8]
 8000868:	3b08      	subs	r3, #8
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <RCC_GetPClk2Value+0xac>)
 800086c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000870:	72fb      	strb	r3, [r7, #11]
	}
	temp = (RCC->CFGR >> 13) & (0x7);
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <RCC_GetPClk2Value+0xa0>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	0b5b      	lsrs	r3, r3, #13
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	723b      	strb	r3, [r7, #8]
	if (temp < 4){
 8000880:	7a3b      	ldrb	r3, [r7, #8]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d802      	bhi.n	800088c <RCC_GetPClk2Value+0x78>
		apb2_prescaler = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	72bb      	strb	r3, [r7, #10]
 800088a:	e005      	b.n	8000898 <RCC_GetPClk2Value+0x84>
	}else {
		apb2_prescaler = APB_Prescaler[temp - 4];
 800088c:	7a3b      	ldrb	r3, [r7, #8]
 800088e:	3b04      	subs	r3, #4
 8000890:	4a0c      	ldr	r2, [pc, #48]	@ (80008c4 <RCC_GetPClk2Value+0xb0>)
 8000892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000896:	72bb      	strb	r3, [r7, #10]
	}
	pclk2 = (sys_clock / ahb_prescaler) / apb2_prescaler;
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	fbb2 f2f3 	udiv	r2, r2, r3
 80008a0:	7abb      	ldrb	r3, [r7, #10]
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	607b      	str	r3, [r7, #4]
	return pclk2;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	00f42400 	.word	0x00f42400
 80008bc:	007a1200 	.word	0x007a1200
 80008c0:	2000000c 	.word	0x2000000c
 80008c4:	20000020 	.word	0x20000020

080008c8 <USART_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d120      	bne.n	800091c <USART_PeriClockControl+0x54>
		if (pUSARTx == USART1){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a24      	ldr	r2, [pc, #144]	@ (8000970 <USART_PeriClockControl+0xa8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d106      	bne.n	80008f0 <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <USART_PeriClockControl+0xac>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	4a23      	ldr	r2, [pc, #140]	@ (8000974 <USART_PeriClockControl+0xac>)
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6453      	str	r3, [r2, #68]	@ 0x44
			USART2_PCLK_DI();
		}else if (pUSARTx == USART6){
			USART6_PCLK_DI();
		}
	}
}
 80008ee:	e038      	b.n	8000962 <USART_PeriClockControl+0x9a>
		}else if (pUSARTx == USART2){
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a21      	ldr	r2, [pc, #132]	@ (8000978 <USART_PeriClockControl+0xb0>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d106      	bne.n	8000906 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 80008f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <USART_PeriClockControl+0xac>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000974 <USART_PeriClockControl+0xac>)
 80008fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000904:	e02d      	b.n	8000962 <USART_PeriClockControl+0x9a>
		}else if (pUSARTx == USART6){
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <USART_PeriClockControl+0xb4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d129      	bne.n	8000962 <USART_PeriClockControl+0x9a>
			USART6_PCLK_EN();
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <USART_PeriClockControl+0xac>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	4a18      	ldr	r2, [pc, #96]	@ (8000974 <USART_PeriClockControl+0xac>)
 8000914:	f043 0320 	orr.w	r3, r3, #32
 8000918:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800091a:	e022      	b.n	8000962 <USART_PeriClockControl+0x9a>
	else if (EnorDi == DISABLE){
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d11f      	bne.n	8000962 <USART_PeriClockControl+0x9a>
		if (pUSARTx == USART1){
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <USART_PeriClockControl+0xa8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <USART_PeriClockControl+0x70>
			USART1_PCLK_DI();
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <USART_PeriClockControl+0xac>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	4a11      	ldr	r2, [pc, #68]	@ (8000974 <USART_PeriClockControl+0xac>)
 8000930:	f023 0310 	bic.w	r3, r3, #16
 8000934:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000936:	e014      	b.n	8000962 <USART_PeriClockControl+0x9a>
		}else if (pUSARTx == USART2){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <USART_PeriClockControl+0xb0>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <USART_PeriClockControl+0x86>
			USART2_PCLK_DI();
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <USART_PeriClockControl+0xac>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a0b      	ldr	r2, [pc, #44]	@ (8000974 <USART_PeriClockControl+0xac>)
 8000946:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800094c:	e009      	b.n	8000962 <USART_PeriClockControl+0x9a>
		}else if (pUSARTx == USART6){
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <USART_PeriClockControl+0xb4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d105      	bne.n	8000962 <USART_PeriClockControl+0x9a>
			USART6_PCLK_DI();
 8000956:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <USART_PeriClockControl+0xac>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a06      	ldr	r2, [pc, #24]	@ (8000974 <USART_PeriClockControl+0xac>)
 800095c:	f023 0320 	bic.w	r3, r3, #32
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40011000 	.word	0x40011000
 8000974:	40023800 	.word	0x40023800
 8000978:	40004400 	.word	0x40004400
 800097c:	40011400 	.word	0x40011400

08000980 <USART_SetBaudRate>:
 *
 * @Note		- uses PCLK1 or PCLK2 depending on USART instance and accounts for OVER8 bit
 */

void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t PCLKx;
  uint32_t usartdiv;
  uint32_t M_part,F_part;
  uint32_t tempreg=0;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  if(pUSARTx == USART1 || pUSARTx == USART6)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a31      	ldr	r2, [pc, #196]	@ (8000a58 <USART_SetBaudRate+0xd8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d003      	beq.n	800099e <USART_SetBaudRate+0x1e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a30      	ldr	r2, [pc, #192]	@ (8000a5c <USART_SetBaudRate+0xdc>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d103      	bne.n	80009a6 <USART_SetBaudRate+0x26>
  {
	   PCLKx = RCC_GetPClk2Value();
 800099e:	f7ff ff39 	bl	8000814 <RCC_GetPClk2Value>
 80009a2:	61f8      	str	r0, [r7, #28]
 80009a4:	e002      	b.n	80009ac <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPClk1Value();
 80009a6:	f7ff fedb 	bl	8000760 <RCC_GetPClk1Value>
 80009aa:	61f8      	str	r0, [r7, #28]
  }
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d00b      	beq.n	80009d0 <USART_SetBaudRate+0x50>
  {
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 80009b8:	69fa      	ldr	r2, [r7, #28]
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	009a      	lsls	r2, r3, #2
 80009c2:	441a      	add	r2, r3
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	e00a      	b.n	80009e6 <USART_SetBaudRate+0x66>
  }else
  {
	  usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 80009d0:	69fa      	ldr	r2, [r7, #28]
 80009d2:	4613      	mov	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	009a      	lsls	r2, r3, #2
 80009da:	441a      	add	r2, r3
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e4:	61bb      	str	r3, [r7, #24]
  }
  M_part = usartdiv/100;
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a60 <USART_SetBaudRate+0xe0>)
 80009ea:	fba2 2303 	umull	r2, r3, r2, r3
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	60fb      	str	r3, [r7, #12]
  tempreg |= M_part << 4;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	011b      	lsls	r3, r3, #4
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
  F_part = (usartdiv - (M_part * 100));
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2264      	movs	r2, #100	@ 0x64
 8000a00:	fb02 f303 	mul.w	r3, r2, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	617b      	str	r3, [r7, #20]
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00a      	beq.n	8000a2c <USART_SetBaudRate+0xac>
   {
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	3332      	adds	r3, #50	@ 0x32
 8000a1c:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <USART_SetBaudRate+0xe0>)
 8000a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a22:	095b      	lsrs	r3, r3, #5
 8000a24:	f003 0307 	and.w	r3, r3, #7
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	e009      	b.n	8000a40 <USART_SetBaudRate+0xc0>
   }else
   {
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	011b      	lsls	r3, r3, #4
 8000a30:	3332      	adds	r3, #50	@ 0x32
 8000a32:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <USART_SetBaudRate+0xe0>)
 8000a34:	fba2 2303 	umull	r2, r3, r2, r3
 8000a38:	095b      	lsrs	r3, r3, #5
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	617b      	str	r3, [r7, #20]
   }
  tempreg |= F_part;
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
  pUSARTx->BRR = tempreg;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	609a      	str	r2, [r3, #8]
}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40011400 	.word	0x40011400
 8000a60:	51eb851f 	.word	0x51eb851f

08000a64 <USART_Init>:
 *
 * @return		- none
 *
 * @Note		- enables peripheral clock and configures CR1/CR2/CR3 and baud rate
 */
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint32_t temp_reg = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2101      	movs	r1, #1
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff26 	bl	80008c8 <USART_PeriClockControl>
	/****************  CR1 Configuration  ***********************/
	// TX RX mode selection
	if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX){
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	791b      	ldrb	r3, [r3, #4]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d104      	bne.n	8000a8e <USART_Init+0x2a>
		//pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
		temp_reg |= 1 << USART_CR1_RE;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	e010      	b.n	8000ab0 <USART_Init+0x4c>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX){
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	791b      	ldrb	r3, [r3, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d104      	bne.n	8000aa0 <USART_Init+0x3c>
		//pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TE);
		temp_reg |= 1 << USART_CR1_TE;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	e007      	b.n	8000ab0 <USART_Init+0x4c>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	791b      	ldrb	r3, [r3, #4]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d103      	bne.n	8000ab0 <USART_Init+0x4c>
		//pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
		//pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TE);
		temp_reg |= (1 << USART_CR1_RE) | (1 << USART_CR1_TE);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f043 030c 	orr.w	r3, r3, #12
 8000aae:	60fb      	str	r3, [r7, #12]
	}

	temp_reg |= (pUSARTHandle->USART_Config.USART_WordLength) << USART_CR1_M;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7b5b      	ldrb	r3, [r3, #13]
 8000ab4:	031b      	lsls	r3, r3, #12
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
	//Parity selection
	if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7b9b      	ldrb	r3, [r3, #14]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d108      	bne.n	8000ad6 <USART_Init+0x72>
		//pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_PCE);
		//pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_PS);
		temp_reg |= 1 << USART_CR1_PCE;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aca:	60fb      	str	r3, [r7, #12]
		temp_reg &= ~(1 << USART_CR1_PS);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e018      	b.n	8000b08 <USART_Init+0xa4>
	}
	else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD){
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7b9b      	ldrb	r3, [r3, #14]
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d108      	bne.n	8000af0 <USART_Init+0x8c>
		//pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_PCE);
		//pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_PS);
		temp_reg |= 1 << USART_CR1_PCE;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ae4:	60fb      	str	r3, [r7, #12]
		temp_reg |= 1 << USART_CR1_PS;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e00b      	b.n	8000b08 <USART_Init+0xa4>
	}
	else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7b9b      	ldrb	r3, [r3, #14]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d107      	bne.n	8000b08 <USART_Init+0xa4>
		//pUSARTHandle->pUSARTx->CR1 &=  ~(1 << USART_CR1_PCE);
		//pUSARTHandle->pUSARTx->CR1 &=  ~(1 << USART_CR1_PS);
		temp_reg &= ~(1 << USART_CR1_PCE);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000afe:	60fb      	str	r3, [r7, #12]
		temp_reg &= ~(1 << USART_CR1_PS);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000b06:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR1 = temp_reg;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	60da      	str	r2, [r3, #12]

	/****************  CR2 Configuration  ***********************/
	temp_reg = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
	temp_reg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7b1b      	ldrb	r3, [r3, #12]
 8000b18:	031b      	lsls	r3, r3, #12
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
	pUSARTHandle->pUSARTx->CR2 = temp_reg;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	611a      	str	r2, [r3, #16]
	/****************  CR3 Configuration  ************************/
	temp_reg = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
	if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7bdb      	ldrb	r3, [r3, #15]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d104      	bne.n	8000b3e <USART_Init+0xda>
		temp_reg |= (1 << USART_CR3_CTSE);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e010      	b.n	8000b60 <USART_Init+0xfc>
	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS){
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7bdb      	ldrb	r3, [r3, #15]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d104      	bne.n	8000b50 <USART_Init+0xec>
		temp_reg |= (1 << USART_CR3_RTSE);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	e007      	b.n	8000b60 <USART_Init+0xfc>
	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7bdb      	ldrb	r3, [r3, #15]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d103      	bne.n	8000b60 <USART_Init+0xfc>
		temp_reg |= ((1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE));
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000b5e:	60fb      	str	r3, [r7, #12]
	}
	pUSARTHandle->pUSARTx->CR3 = temp_reg;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	615a      	str	r2, [r3, #20]
	/**************    Baudrate Configuration  ***************************/
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4619      	mov	r1, r3
 8000b72:	4610      	mov	r0, r2
 8000b74:	f7ff ff04 	bl	8000980 <USART_SetBaudRate>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <USART_SendData>:
 * @return		- none
 *
 * @Note		- this is blocking; waits for TXE and TC flags as needed
 */

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
	for(uint32_t i = 0 ; i < Len; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e036      	b.n	8000c00 <USART_SendData+0x80>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000b92:	bf00      	nop
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2180      	movs	r1, #128	@ 0x80
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f8bd 	bl	8000d1a <USART_GetFlagStatus>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0f6      	beq.n	8000b94 <USART_SendData+0x14>
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	7b5b      	ldrb	r3, [r3, #13]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d118      	bne.n	8000be0 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bc0:	605a      	str	r2, [r3, #4]
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	7b9b      	ldrb	r3, [r3, #14]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d106      	bne.n	8000bd8 <USART_SendData+0x58>
			{
				pTxBuffer++;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	e010      	b.n	8000bfa <USART_SendData+0x7a>
			}
			else
			{
				pTxBuffer++;
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	e00c      	b.n	8000bfa <USART_SendData+0x7a>
			}
		}
		else
		{
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
			debug =  (*pTxBuffer  & (uint8_t)0xFF);
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <USART_SendData+0xa8>)
 8000bf2:	601a      	str	r2, [r3, #0]
			pTxBuffer++;
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d3c4      	bcc.n	8000b92 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000c08:	bf00      	nop
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2140      	movs	r1, #64	@ 0x40
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f882 	bl	8000d1a <USART_GetFlagStatus>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f6      	beq.n	8000c0a <USART_SendData+0x8a>
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000088 	.word	0x20000088

08000c2c <USART_ReceiveData>:
 * @return		- none
 *
 * @Note		- this is blocking; waits for RXNE flag before reading DR
 */
void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0 ; i < Len; i++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e045      	b.n	8000cca <USART_ReceiveData+0x9e>
	{
		while (! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_RXNE));
 8000c3e:	bf00      	nop
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2120      	movs	r1, #32
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f867 	bl	8000d1a <USART_GetFlagStatus>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f6      	beq.n	8000c40 <USART_ReceiveData+0x14>
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	7b5b      	ldrb	r3, [r3, #13]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d11d      	bne.n	8000c96 <USART_ReceiveData+0x6a>
		{
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	7b9b      	ldrb	r3, [r3, #14]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10f      	bne.n	8000c82 <USART_ReceiveData+0x56>
			{
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x1FF);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	801a      	strh	r2, [r3, #0]
				pRxBuffer++;
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	3301      	adds	r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
				pRxBuffer++;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	e020      	b.n	8000cc4 <USART_ReceiveData+0x98>
			}
			else
			{
				 *pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	701a      	strb	r2, [r3, #0]
				 pRxBuffer++;
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	3301      	adds	r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	e016      	b.n	8000cc4 <USART_ReceiveData+0x98>
			}
		}
		else
		{
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	7b9b      	ldrb	r3, [r3, #14]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d106      	bne.n	8000cac <USART_ReceiveData+0x80>
			{
				 *pRxBuffer =(uint8_t) pUSARTHandle->pUSARTx->DR ;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e008      	b.n	8000cbe <USART_ReceiveData+0x92>
			}
			else
			{
				 *pRxBuffer = ((uint8_t) pUSARTHandle->pUSARTx->DR) & (uint8_t)0x7F;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	701a      	strb	r2, [r3, #0]
			}
			pRxBuffer++;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d3b5      	bcc.n	8000c3e <USART_ReceiveData+0x12>
		}
	}

}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <USART_PeripheralControl>:
 * @return		- none
 *
 * @Note		- none
 */

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d106      	bne.n	8000cfc <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60da      	str	r2, [r3, #12]
	}
	else if (EnOrDi == DISABLE){
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000cfa:	e008      	b.n	8000d0e <USART_PeripheralControl+0x32>
	else if (EnOrDi == DISABLE){
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d105      	bne.n	8000d0e <USART_PeripheralControl+0x32>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60da      	str	r2, [r3, #12]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <USART_GetFlagStatus>:
 *
 * @return		- uint8_t : FLAG_SET or FLAG_RESET
 *
 * @Note		- none
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName){
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
	if (pUSARTx->SR & FlagName){
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <USART_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <__libc_init_array>:
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	4d0d      	ldr	r5, [pc, #52]	@ (8000d7c <__libc_init_array+0x38>)
 8000d48:	4c0d      	ldr	r4, [pc, #52]	@ (8000d80 <__libc_init_array+0x3c>)
 8000d4a:	1b64      	subs	r4, r4, r5
 8000d4c:	10a4      	asrs	r4, r4, #2
 8000d4e:	2600      	movs	r6, #0
 8000d50:	42a6      	cmp	r6, r4
 8000d52:	d109      	bne.n	8000d68 <__libc_init_array+0x24>
 8000d54:	4d0b      	ldr	r5, [pc, #44]	@ (8000d84 <__libc_init_array+0x40>)
 8000d56:	4c0c      	ldr	r4, [pc, #48]	@ (8000d88 <__libc_init_array+0x44>)
 8000d58:	f000 f818 	bl	8000d8c <_init>
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	10a4      	asrs	r4, r4, #2
 8000d60:	2600      	movs	r6, #0
 8000d62:	42a6      	cmp	r6, r4
 8000d64:	d105      	bne.n	8000d72 <__libc_init_array+0x2e>
 8000d66:	bd70      	pop	{r4, r5, r6, pc}
 8000d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d6c:	4798      	blx	r3
 8000d6e:	3601      	adds	r6, #1
 8000d70:	e7ee      	b.n	8000d50 <__libc_init_array+0xc>
 8000d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d76:	4798      	blx	r3
 8000d78:	3601      	adds	r6, #1
 8000d7a:	e7f2      	b.n	8000d62 <__libc_init_array+0x1e>
 8000d7c:	08000dac 	.word	0x08000dac
 8000d80:	08000dac 	.word	0x08000dac
 8000d84:	08000dac 	.word	0x08000dac
 8000d88:	08000db0 	.word	0x08000db0

08000d8c <_init>:
 8000d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8e:	bf00      	nop
 8000d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d92:	bc08      	pop	{r3}
 8000d94:	469e      	mov	lr, r3
 8000d96:	4770      	bx	lr

08000d98 <_fini>:
 8000d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9a:	bf00      	nop
 8000d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9e:	bc08      	pop	{r3}
 8000da0:	469e      	mov	lr, r3
 8000da2:	4770      	bx	lr
